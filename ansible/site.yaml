---

- name: Deploy LXD
  hosts: default
  become: false
  tasks:
    - name: Initialize LXD
      command:
        cmd: lxd init --preseed
        stdin: "{{ lookup('file', 'lxd_preseed.yaml') }}"
        creates: /var/lib/lxd/networks/lxdbr0

    - name: Create first Alpine container
      lxd_container:
        name: R1
        state: started
        source:
          type: image
          mode: pull
          server: https://images.linuxcontainers.org
          protocol: simplestreams # if you get a 404, try setting protocol: simplestreams
          alias: alpine/3.16/amd64
        profiles: ["default"]
        wait_for_ipv4_addresses: true

    - name: Check Python3 in the container
      delegate_to: R1
      raw: python3 /dev/null
      register: python3_check
      failed_when: false
      changed_when: false

    - name: Install Python 3 into Alpine container
      delegate_to: R1
      raw: apk add python3
      when: python3_check.rc != 0

    - name: Upgrade everything in the container
      delegate_to: R1
      apk:
        update_cache: yes
        upgrade: yes

    - name: Install FRR into container
      delegate_to: R1
      apk:
        name: frr

    - name: Ensure IP forwarding is enabled
      delegate_to: R1
      sysctl:
        sysctl_file: /etc/sysctl.d/forwarding.conf
        name: "{{ item }}"
        value: "1"
        sysctl_set: yes
      with_items:
          - net.ipv4.conf.all.forwarding
          - net.ipv6.conf.all.forwarding
          - net.ipv6.conf.default.forwarding

    - name: Enable and start sysctl in the container
      delegate_to: R1
      service:
        name: sysctl
        state: started
        enabled: yes

    # Commented out because this will make second run of this playbook
    # to fail unless container R1 is deleted beforehand

    #- name: "Detach default network from containers"
    #  command:
    #    cmd: "lxc network detach-profile lxdbr0 default"
    #  register: net_detach
    #  failed_when: net_detach.rc not in [0, 1]
    #  changed_when: net_detach.rc == 0

    - name: Clone container
      command:
        cmd: "lxc cp R1 {{ item }}"
        creates: "/var/lib/lxd/containers/{{ item }}"
      with_items:
        - R2
        - R3
        - C1
        - C2
        - AS66
        - AS99

    - name: Attach networks to the containers
      command:
        cmd: "lxc network attach {{ item.network }} {{ item.container }} {{ item.ifname }} {{ item.ifname }}"
      register: net_attach
      failed_when: net_attach.rc not in [0, 1]
      changed_when: net_attach.rc == 0
      with_items:
         - network: lxdIXP
           container: AS66
           ifname: ixp
         - network: lxdIXP
           container: AS99
           ifname: ixp
         - network: lxdIXP
           container: R1
           ifname: ixp
         - network: lxdR1R2
           container: R1
           ifname: to_R2
         - network: lxdR1R3
           container: R1
           ifname: to_R3
         - network: lxdR1R2
           container: R2
           ifname: to_R1
         - network: lxdR2R3
           container: R2
           ifname: to_R3
         - network: lxdR2C1
           container: R2
           ifname: to_C1
         - network: lxdR1R3
           container: R3
           ifname: to_R1
         - network: lxdR2R3
           container: R3
           ifname: to_R2
         - network: lxdR3C2
           container: R3
           ifname: to_C2
         - network: lxdR2C1
           container: C1
           ifname: to_R2
         - network: lxdR3C2
           container: C2
           ifname: to_R3

    - name: Ensure containers are started
      lxd_container:
        name: "{{ item }}"
        state: started
      with_items:
        - R2
        - R3
        - C1
        - C2
        - AS66
        - AS99

- name: Host provision
  hosts: default
  become: true
  tasks:
    # This takes a looong time
    #
    #- name: Upgrade everything
    #  apt:
    #    upgrade: dist

    - name: Install necessary packages
      apt:
        package:
          - nginx
          - tmux
          - libwebsockets8

    - name: Setup WebSockets connection upgrade
      copy:
        src: nginx/connection_upgrade.conf
        dest: "/etc/nginx/conf.d/"
        mode: 0644
      notify: reload nginx

    - name: Disable absolute redirects
      lineinfile:
        line: "absolute_redirect off;"
        dest: "/etc/nginx/conf.d/no_absolute_redirects.conf"
        create: yes
        mode: 0644
      notify: reload nginx

    - name: Setup ttyd proxy snippet
      copy:
        src: nginx/ttydconsole.conf
        dest: "/etc/nginx/snippets/"
        mode: 0644
      notify: reload nginx

    - name: Enable ttyd proxy snippet
      lineinfile:
        path: "/etc/nginx/sites-available/default"
        line: "include /etc/nginx/snippets/ttydconsole.conf;"
        insertbefore: "^\\s*location / {.*$"
      notify: reload nginx

    - name: Deploy static website
      copy:
        src: ../../labfrontend/_site/
        dest: /var/www/html/
        owner: www-data
        group: www-data
        mode: 0644

    - name: Install fancy 404 page
      lineinfile:
        path: "/etc/nginx/sites-available/default"
        line: "error_page 404 /404.html;"
        insertafter: "^\\s*root /var/www/html;$"
      notify: reload nginx

    - name: Start Nginx
      service:
        name: nginx
        state: started
        enabled: on

    - name: Install ttyd
      # We use a locally complied binary until this gets fixed:
      # https://github.com/tsl0922/ttyd/issues/414
      #
      #get_url:
        #url: https://github.com/tsl0922/ttyd/releases/download/1.6.1/ttyd_linux.x86_64
      copy:
        src: ttyd
        dest: /opt/ttyd
        mode: 0755

    - name: Deploy tmux config file
      copy:
        src: ttyd-tmux.conf
        dest: "/opt/"
        mode: 0644

    - name: Deploy ttyd-vtysh unit files
      copy:
        src: "systemd/{{ item }}"
        dest: "/etc/systemd/system/"
        mode: 0644
      notify: systemctl daemon-reload
      with_items:
        - ttyd-vtysh@.service
        - ttyd-admin.service
        - ttyd-vtysh.target

    - name: Deploy ttyd-vtysh generator
      copy:
        src: systemd/ttyd-vtysh.generator
        dest: "/etc/systemd/system-generators/"
        mode: 0755
      notify: systemctl daemon-reload

    - name: Enable and start ttyd-vtysh target
      service:
        name: ttyd-vtysh.target
        state: started
        enabled: on

    - name: Enable and start ttyd-admin
      service:
        name: ttyd-admin.service
        state: started
        enabled: on

  handlers:
    - name: reload nginx
      service:
        name: nginx
        state: reloaded

    - name: systemctl daemon-reload
      systemd:
        daemon_reload: yes

- name: Configure containers
  hosts: containers
  tasks:
    - name: Template common configs
      template:
        src: "{{ item }}.j2"
        dest: "/etc/frr/{{ item }}"
        owner: frr
        group: frr
        mode: 0644
      notify: restart frr
      with_items:
        - vtysh.conf

    - name: Deploy configs
      copy:
        src: "{{ inventory_hostname }}/{{ item }}"
        dest: "/etc/frr/{{ item }}"
        owner: frr
        group: frr
        mode: 0644
      notify: restart frr
      when: "[ playbook_dir, \"files\", inventory_hostname, item]|join('/') is file"
      with_items:
        - zebra.conf
        - bgpd.conf

    - name: Enable FRR daemons
      lineinfile:
        path: "/etc/frr/daemons"
        line: "{{ item }}=yes"
        regexp: "^{{ item }}="
      notify: restart frr
      with_items:
        - bgpd
        - ospfd
        - ospf6d
        #- isisd

    - name: Enable and start frr
      service:
        name: frr
        state: started
        enabled: yes

  handlers:
    - name: restart frr
      service:
        name: frr
        state: restarted


...
